{- Free Algebra over a set -}
open import UnivAlgebra
open import Level renaming (zero to lzero ; suc to lsuc)
module FreeAlgebra (Σ : Signature) {ℓ₁ ℓ₂} (𝓒 : AlgClass {ℓ₁} {ℓ₂} Σ) where
import SubAlgebra

open import Setoids
open import Morphisms
open import Function.Injection
open import Relation.Binary hiding (Total)
open import Data.Product hiding (Σ)

open Signature
open import Function.Equality renaming (_∘_ to _∘ₑ_) 
open Algebra
open Universe Σ

module UMP {ℓ₁ ℓ₂} {A : Algebra {ℓ₁} {ℓ₂} Σ} where
  open SubAlgebra Σ A
  open Setoid

  UMP : ∀ {ℓ₃ ℓ₄ ℓ₅ ℓ₆} {X : Universe ℓ₃ ℓ₄} →
        (X ⊆ₛ (A ⟦_⟧ₛ)) → Algebra {ℓ₅} {ℓ₆} Σ → Set _
  UMP {X = X} X⊆A B = (f : X ⟶ₛ (B ⟦_⟧ₛ)) → ∃! _≈ₕ_ (Pr f)
    where open Hom A B
          open Homo
          ι : X ⟶ₛ (A ⟦_⟧ₛ)
          ι s = to 
            where open Injection (X⊆A {s})
          Pr : X ⟶ₛ (B ⟦_⟧ₛ) → Homo → Set _
          Pr f H = ∀ s x → Setoid._≈_ (B ⟦ s ⟧ₛ) (f s ⟨$⟩ x) (′ H ′ s ∘ₑ ι s ⟨$⟩ x)

open SubAlgebra using (_⊆ₛ_)

{- A is free on 𝓒 over X if A is generated by X and 
       A satisfies the UMP for any other B in 𝓒. -}

_is-Free-over_ : ∀ {ℓ₃} {ℓ₄} {X : Universe ℓ₃ ℓ₄} (A : Algebra {ℓ₁} {ℓ₂} Σ) {CA : 𝓒 A} →
                 (_⊆ₛ_ Σ A X (A ⟦_⟧ₛ)) → Set _
A is-Free-over X = IsGeneratedBy (Img X) × (∀ B → (CB : 𝓒 B) → UMP X B)
  where open UMP {A = A}
        open SubAlgebra Σ A

-- Alternative:
-- Asume that X is a predicate over A
-- say that A is free in 𝓒 over X if
--   ∀ B → 𝓒 B → (∀ h : A → B) → ∃ ! G : Homo (⟨ X ⟩ A) B st for all (a :A), X a → h a = G a
