-- Algebra generated by a set.
module SubAlgebra where

open import Level renaming (zero to lzero ; suc to lsuc)
open import Relation.Binary
open import Relation.Unary renaming (_⊆_ to _⊆u_)
open import Data.Product hiding (map)
open import Function
open import Function.Equality hiding (_∘_)
open import UnivAlgebra
open import Equational
open import Product
open import Morphisms
open import Setoids
open import HeterogeneousVec
open Signature
open ProdAlg
open Hom
open Algebra

-- The Intersection of an OpClosed family of predicates is OpClosed.
open SetoidPredicate
Predicate : ∀ {ℓ₁ ℓ₂ Σ} → (A : Algebra {ℓ₁} {ℓ₂} Σ) → (ℓ₃ : Level) → Set (lsuc (ℓ₁ ⊔ ℓ₂ ⊔ ℓ₃))
Predicate {Σ = Σ} A ℓ₃ = (s : sorts Σ) → SetoidPredicate {ℓ₃ = ℓ₃} (A ⟦ s ⟧ₛ)

IxPredicate : ∀ {ℓ₁ ℓ₂ Σ} → (A : Algebra {ℓ₁} {ℓ₂} Σ) → (ℓ₃ ℓ₄ : Level) → Set _
IxPredicate A ℓ₃ ℓ₄ = Pred (Predicate A ℓ₃) ℓ₄

⋂p : ∀ {ℓ₁ ℓ₂ ℓ₃ ℓ₄ Σ} {A : Algebra {ℓ₁} {ℓ₂} Σ} →
      IxPredicate A ℓ₃ ℓ₄ → Predicate A _
⋂p  P s = record {  predicate = λ x → ∀ Q → P Q → predicate (Q s) x
                 ; predWellDef = λ eq p Q → predWellDef (Q s) eq ∘ p Q
                 }

⋂-OpClosed : ∀ {ℓ₁ ℓ₂ ℓ₃ ℓ₄ Σ} {A : Algebra {ℓ₁} {ℓ₂} Σ} 
      (P : IxPredicate A ℓ₃ ℓ₄) → (∀ Q → P Q → OpClosed A (predicate ∘ Q)) →
      OpClosed A (predicate ∘ ⋂p {ℓ₃ = ℓ₃} {ℓ₄} {A = A} P)
⋂-OpClosed {A = A} P isClosed f vs Q pQ = isClosed Q pQ f (map⇨v (λ v → v Q pQ) vs)

open SubAlg
⋂-SubAlg : ∀ {ℓ₁ ℓ₂ ℓ₃ ℓ₄ Σ} {A : Algebra {ℓ₁} {ℓ₂} Σ} →
         (P : IxPredicate A ℓ₃ ℓ₄) → (∀ Q → P Q → OpClosed A (predicate ∘ Q)) →
      SubAlg {ℓ₃ = lsuc ℓ₁ ⊔ lsuc ℓ₂ ⊔ lsuc ℓ₃ ⊔ ℓ₄} A
⋂-SubAlg {ℓ₃ = ℓ₃} {ℓ₄} {A = A} P isClosed = record
             { pr = ⋂p {ℓ₃ = ℓ₃} {ℓ₄} {A = A} P
             ; opClosed = ⋂-OpClosed {ℓ₃ = ℓ₃} {A = A} P isClosed
             }
⋂-SubAlg' : ∀ {ℓ₁ ℓ₂ ℓ₃ ℓ₄ Σ} {A : Algebra {ℓ₁} {ℓ₂} Σ} →
         (P : Pred (SubAlg {ℓ₃ = ℓ₃} A) ℓ₄) → 
      SubAlg {ℓ₃ = lsuc ℓ₁ ⊔ lsuc ℓ₂ ⊔ lsuc ℓ₃ ⊔ ℓ₄} A
⋂-SubAlg' {ℓ₃ = ℓ₃} {ℓ₄} {Σ} {A = A} P = record
             { pr = pred
             ; opClosed = λ f vs Q pq → opClosed Q f (map⇨v (λ v → v Q pq) vs)
             }
     where pred : Predicate A _
           pred s = record { predicate = λ x → ∀ Q → P Q → predicate (pr Q s) x
                           ; predWellDef = λ eq pres Q → predWellDef (pr Q s) eq ∘ pres Q
                           }


_⊆ₛ_ : ∀ {ℓ₁ ℓ₂ ℓ₃ Σ} {A : Algebra {ℓ₁} {ℓ₂} Σ} → (X Y : Predicate A ℓ₃) → Set _
X ⊆ₛ Y = ∀ s → predicate (X s) ⊆u predicate (Y s) 

-- -- Algebra generated by a SetoidPredicate (not necessarily OpClosed).
<_>_ : ∀ {ℓ₁ ℓ₂ ℓ₃ ℓ₄ Σ} {A : Algebra {ℓ₁} {ℓ₂} Σ} →
         (X : Predicate A ℓ₃) → (P : Pred (SubAlg {ℓ₃ = ℓ₃} A) ℓ₄) →
         SubAlg {ℓ₃ = _} A
<_>_ {ℓ₃ = ℓ₃} {ℓ₄} {A = A} X P = ⋂-SubAlg' λ Q → P Q × (X ⊆A pr Q)
  where _⊆A_ : _
        _⊆A_ = _⊆ₛ_ {A = A}
